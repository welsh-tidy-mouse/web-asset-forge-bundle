<?php

use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;

return static function (DefinitionConfigurator $definition): void {
    $definition->rootNode()
        ->children()
            ->arrayNode('binaries')
                ->addDefaultsIfNotSet()
                ->children()
                    ->booleanNode('download_if_missing')
                        ->info('Try to download tool binaries if not present localy.')
                        ->defaultValue(true)
                    ->end()
                    ->scalarNode('bin_dir')
                        ->cannotBeEmpty()
                        ->info('Absolute path to the directory where executable binaries will be stored and made available.')
                        ->defaultValue('%kernel.project_dir%/bin/web_asset_forge')
                    ->end()
                    ->scalarNode('download_dir')
                        ->cannotBeEmpty()
                        ->info('Absolute path to the directory where binaries will be downloaded before being moved to the install_dir.')
                        ->defaultValue('%kernel.project_dir%/var/web_asset_forge_downloads')
                    ->end()
                ->end()
            ->end()
            ->arrayNode('scopes')
                ->useAttributeAsKey('name')
                ->arrayPrototype()
                    ->children()
                        ->stringNode('path')
                            ->cannotBeEmpty()
                            ->info('Absolute root path of your scope.')
                            ->example(['%kernel.project_dir%'])
                        ->end()
                        ->stringNode('runner')
                            ->cannotBeEmpty()
                            ->info('Runner used to manage your files.')
                            ->example(['bun', 'asset_mapper', 'webpack_encore'])
                        ->end()
                        ->arrayNode('plugins')
                            ->info('Array of plugins for your runner')
                            ->prototype('string')->end()
                            ->example(['tailwind', 'minify'])
                        ->end()
                    ->end()
                ->end()
            ->end()
        ->end()
    ;
};
